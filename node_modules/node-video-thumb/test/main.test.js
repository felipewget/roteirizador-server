const thumb = require('../index')
const path = require('path')
const fse = require('fs-extra')
const assert = require('assert')
const mocha = require('mocha')

mocha.describe('main', () => {
  const tmp = path.resolve(__dirname, 'tmp')
  const assets = path.resolve(__dirname, 'assets')
  const options = {
    source: path.join(tmp, 'video.mp4'),
    target: path.join(tmp, 'video_thumb.jpg'),
    width: 100,
    height: 50,
    seconds: 1
  }

  /* create tmp dir, and copy assets */
  mocha.before(async () => {
    await fse.mkdir(tmp)
    await fse.copy(
      path.join(assets, 'video.mp4'),
      path.join(tmp, 'video.mp4')
    )
  })

  /* remove tmp dir */
  mocha.after(async () => {
    await fse.remove(tmp)
  })

  mocha.it(`should generate thumb`, async () => {
    await thumb(options)
    await fse.access(options.target)
  })

  mocha.it(`should throw Error if params are invalid`, async () => {
    const invalidOptionsList = [
      Object.assign({}, options, { width: 'not a number' }),
      Object.assign({}, options, { height: 'not a number' }),
      Object.assign({}, options, { source: './relative/path' }),
      Object.assign({}, options, { target: './relative/path' }),
      Object.assign({}, options, { seconds: 'not a number' })
    ]

    for (let invalidOptions of invalidOptionsList) {
      let ok = false
      try {
        await thumb(invalidOptions)
      } catch (err) {
        ok = true
      }
      assert.equal(ok, true)
    }
  })
})
